Question 1
$ ssh examtp@51.255.199.225
> ls
. . . . . . /* quelques fichiers */ ......
> cd
> echo $HOME
/home/examtp
> pwd
/home/examtp
// Nous remarquons ici que nous sommes bien placés, grâce à la commande cd seule (ou cd ~) qui nous emmène directement dans notre répertoire de session (contenu dans la variable d'environnement $HOME et également précisé dans le fichier /etc/passwd)

Question 2: 

> script joly_martin.txt


Question 3:

> man ls
> ls -lat
	total 120
	drwxr-xr-x 4 root   root    4096 Dec  4 20:33 ..
	-rw-r--r-- 1 examtp examtp   655 Dec  4 20:33 .profile
	-rw-r--r-- 1 examtp examtp  3771 Dec  4 20:33 .bashrc
	-rw-r--r-- 1 examtp examtp   220 Dec  4 20:33 .bash_logout
	drwx------ 2 examtp examtp  4096 Dec  8 08:53 .cache
	-rw-rw-r-- 1 examtp examtp  4096 Dec  8 09:19 DEAZEVEDO_Adrien.txt
	-rw-rw-r-- 1 examtp examtp   660 Dec  8 09:20 PERDRIEAU_Clement.txt
	-rw------- 1 examtp examtp   681 Dec  8 09:20 .viminfo
	drwxr-xr-x 3 examtp examtp  4096 Dec  8 09:20 .
	-rw------- 1 examtp examtp  2736 Dec  8 09:24 .bash_history
	-rw-rw-r-- 1 examtp examtp 81920 Dec  8 09:24 joly_martin.txt
> ls -latr
	total 120
	-rw-rw-r-- 1 examtp examtp 81920 Dec  8 09:24 joly_martin.txt
	-rw------- 1 examtp examtp  2736 Dec  8 09:24 .bash_history
	drwxr-xr-x 3 examtp examtp  4096 Dec  8 09:20 .
	-rw------- 1 examtp examtp   681 Dec  8 09:20 .viminfo
	-rw-rw-r-- 1 examtp examtp   660 Dec  8 09:20 PERDRIEAU_Clement.txt
	-rw-rw-r-- 1 examtp examtp  4096 Dec  8 09:19 DEAZEVEDO_Adrien.txt
	drwx------ 2 examtp examtp  4096 Dec  8 08:53 .cache
	-rw-r--r-- 1 examtp examtp   220 Dec  4 20:33 .bash_logout
	-rw-r--r-- 1 examtp examtp  3771 Dec  4 20:33 .bashrc
	-rw-r--r-- 1 examtp examtp   655 Dec  4 20:33 .profile
	drwxr-xr-x 4 root   root    4096 Dec  4 20:33 ..

> cat /etc/passwd
	/* contenu du fichier
> tail -n 5 /etc/passwd
	dnsmasq:x:109:65534:dnsmasq,,,:/var/lib/misc:/bin/false
	sshd:x:110:65534::/var/run/sshd:/usr/sbin/nologin
	pollinate:x:111:1::/var/cache/pollinate:/bin/false
	ubuntu:x:1000:1000:Ubuntu:/home/ubuntu:/bin/bash
	examtp:x:1001:1001:examtp,0,000,000,0:/home/examtp:/bin/bash
// ICI tail va écrire les 5 premières lignes en partant de la fin grâce à l'option -n 5
// tail -> inverse de head
> cat /etc/passwd | awk '{a[++i%5]=$0} END {print a[++i%5],a[++i%5],a[++i%5],a[++i%5],a[++i%5]}' OFS='\n'
//Ici on va utiliser la commande awk qui permet de faire des traitements sur les sorties et sur les fichiers.
J'ai cherché sur internet cette commande, qui était déjà faite pour les 4 dernières lignes d'un fichier, du coup je l'ai adapté à mes besoins.

cat /etc/passwd | grep -e "x:[100-1200]" > tmp.txt && grep -e "^m" tmp.txt > tmp2.txt && grep -e "^s" tmp.txt >> tmp2.txt && rm tmp.txt && cat tmp2.txt


Question 4

ls /etc | grep ^[p,m]

On filtre les sorties du 'ls' de '/etc' grâce à grep et on affiche seulement les lignes qui commencent par un "p" ou un "m"

Question 5

Pour créer mon compte, je fais
> useradd jolymartin -g gjolymartin -d /home/examtp/jolymartin

Néanmoins, étant donné que examtp ne fait pas parti des sudoers, je n'ai donc pas les droits nécéssaires pour créer ni un compte, ni un groupe.


Ensuite pour paramétrer mon mot de passe j'utilise la commande 'passwd $USER' (j'aurais pu préciser également mon mot de passe grâce à l'option '-p' de 'useradd' mais il aurait du être crypté)
> passwd jolymartin

Pour changer mon mot de passe, j'utilise encore la commande 'passwd'
> passwd jolymartin
> cat /etc/passwd | grep jolymartin
La commande grep va afficher toutes les lignes de l'entrée (la sortie de cat /etc/passwd) contenant 'jolymartin'
> cat /etc/shadow | grep jolymartin

Question 6:

> su jolymartin
Cette commande me permet de me connecter à l'utilisateur jolymartin à travers le shell.
Pour me placer dans mon répertoire de session, je fais la commande
> cd
ou
> cd ~
ou
> cd $HOME

Question 7 :
$ touch fic1 file2 fic3fic fichierfile file3file && mkdir rep_1 && mv f* rep_1/

La commande 'touch file1 file2 ..' créée les fichiers (vides), la commande 'mkdir nomDeDossier' créée le repertoire et la commande 'mv src dest/' bouge les fichiers src dans le repertoire dest.
f* signifie "tous les fichiers commençant par f".
&& signifie "si la commande est successful, alors".

Question 8 :
$ mkdir temps
$ cd temps
$ touch fic1 fic2 fichierVide monFichierVide
$ echo "contenu" > monFichierNonVide
$ echo "encore du contenu" > unNouveauFichier
$ find . -size 0 -exec rm {} \;

La commande ci dessus va chercher les fichiers qui remplissent les conditions : ici la taille doit être 0 comme le précise le paramètre -size. Et il va ensuite éxécuter la commande rm sur ces fichiers comme le précise le paramètre -exec

Question 9:
ps -ejHU jolymartin | xargs -I {} bg {} && ps -ejHU jolymartin | xargs -I {} kill {}

'ps' affiche les processus en cours, l'option '-ejH' permet selon le man d'afficher les process sous la forme d'un ptree, l'option 'U' permet de sélectionner les processus créés par un certain utilisateur
Ensuite avec 'xargs' on va mettre les processus qu'on aura récupéré de la commande précédante grâce au pipe '|', en arrière plan, puis on va recommencer et rechercher les process de jolymartin pour enfin les envoyer à xargs -I {} kill {} qui va les killer. (équivalent de 'kill $PID')

La commande à rentrer est
alias searchkill_jolymartin="ps -ejHU jolymartin | xargs -I {} bg {} && ps -ejHU jolymartin | xargs -I {} kill {}"

Question 10:
rechercher() { find '$2' -perm -x -exec echo {}\; > $1 ; }

La fonction rechercher() va chercher les fichiers dans le répertoire $2 (argument n°2 passé à la fonction) qui ont la permission -x (qui sont donc éxécutables) ensuite il va éxécuter un echo du path de ces fichiers puis rediriger la sortie dans $1 (choisi par l'user)

Ensuite on créée un alias qui renvoie vers cette fonction

alias searchexe_jolymartin=rechercher

On peut définir la fonction ainsi que l'alias dans le .bashrc, pour qu'ils soient opérationnels dès le démarrage d'un nouveau shell (uniquement à l'ouverture de bash par contre).


Pour se déconnecter, on exécute :
$ history -c
$ exit